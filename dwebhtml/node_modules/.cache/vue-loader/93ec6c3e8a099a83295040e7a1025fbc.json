{"remainingRequest":"D:\\dewebblog\\dwebhtml\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dewebblog\\dwebhtml\\src\\views\\UserPerm.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\dewebblog\\dwebhtml\\src\\views\\UserPerm.vue","mtime":1608439691270},{"path":"D:\\dewebblog\\dwebhtml\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\dewebblog\\dwebhtml\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\dewebblog\\dwebhtml\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKaW1wb3J0IFFzIGZyb20gJ3FzJwpleHBvcnQgZGVmYXVsdCB7CiAgICBkYXRhKCkgewogICAgICAgIAogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIG5ld19ncm91cDogewogICAgICAgICAgICAgICAgbmFtZTogJycsCiAgICAgICAgICAgICAgICBjaGVja0xpc3Q6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaWh+eroOeuoeeQhgogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAi5paH56ug566h55CGIiwKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudF90eXBlOiAiYmxvZ19hcnRpY2xlIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGVybV9tZXRob2RzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIuWiniIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZW5hbWU6ICJhZGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICLliKAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVuYW1lOiAiZGVsZXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAi5pS5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlbmFtZTogImNoYW5nZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIuafpSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZW5hbWU6ICJ2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tMaXN0OiBbXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAvLyDnlKjmiLfnrqHnkIYKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIueUqOaIt+euoeeQhiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfdHlwZTogImF1dGhfdXNlciIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1fbWV0aG9kczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICLlop4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVuYW1lOiAiYWRkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAi5YigIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlbmFtZTogImRlbGV0ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIuaUuSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZW5hbWU6ICJjaGFuZ2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICLmn6UiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVuYW1lOiAidmlldyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrTGlzdDogW10KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8g5qCP55uu566h55CGCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICLmoI/nm67nrqHnkIYiLAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X3R5cGU6ICJibG9nX2xhbm11IiwKICAgICAgICAgICAgICAgICAgICAgICAgcGVybV9tZXRob2RzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIuWiniIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZW5hbWU6ICJhZGQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICLliKAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVuYW1lOiAiZGVsZXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAi5pS5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlbmFtZTogImNoYW5nZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIuafpSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZW5hbWU6ICJ2aWV3IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tMaXN0OiBbXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWxsX2dyb3VwczogW10sCgogICAgICAgICAgICAvLyDnlKjmiLfliJfooajliIbphY0KICAgICAgICAgICAgdXNlcmxpc3Q6IFtdLAogICAgICAgICAgICBjaG9vc2VkX3VzZXI6IFtdLAogICAgICAgICAgICBjaG9vc2VkX2dyb3VwOjAsCiAgICAgICAgICAgIGZpbHRlck1ldGhvZChxdWVyeSwgaXRlbSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZS5pbmRleE9mKHF1ZXJ5KSA+IC0xOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHRoaXMuZ2V0QWxsVXNlckdyb3VwKCk7CiAgICAgICAgdGhpcy5nZXRVc2VyTGlzdCgpOwogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICAvLyDkv53lrZjliIbphY3nlKjmiLfnu4QKICAgICAgICBzZXRVc2VyVG9Hcm91cCgpewogICAgICAgICAgICAKICAgICAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5hbGxfZ3JvdXBzW3RoaXMuY2hvb3NlZF9ncm91cF0KICAgICAgICAgICAgbGV0IHVzZXJsaXN0ID0gdGhpcy5jaG9vc2VkX3VzZXIKCiAgICAgICAgICAgIGlmICh1c2VybGlzdC5sZW5ndGg9PTApIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCfmsqHmnInpgInmi6nnlKjmiLcnKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIOaPkOS6pOeUqOaIt+e7hOWIhue7hAogICAgICAgICAgICBheGlvcyh7CiAgICAgICAgICAgICAgICBtZXRob2Q6J3Bvc3QnLAogICAgICAgICAgICAgICAgdXJsOiAiaHR0cDovLzguMTMxLjIyNS4xMzE6ODEvYXBpL2R3ZWItZ3JvdXAvIiwKICAgICAgICAgICAgICAgIGRhdGE6UXMuc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICB0b2tlbjp0aGlzLiRzdG9yZS5nZXR0ZXJzLmlzbm90VXNlcmxvZ2luLAogICAgICAgICAgICAgICAgICAgIGdyb3VwOmdyb3VwLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgdXNlcmxpc3Q6SlNPTi5zdHJpbmdpZnkodXNlcmxpc3QpICAKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pLnRoZW4oKHJlcyk9PnsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKQogICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhID09ICdub2xvZ2luJykgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCflsJrmnKrnmbvlvZUnKQogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhID09ICdub3Blcm0nKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+adg+mZkOS4jei2sycpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEgPT0gJ29rJykgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCfnlKjmiLfmnYPpmZDliIbphY3miJDlip8nKQoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKCiAgICAgICAgfSwKICAgICAgICAvLyDpgInmi6nnlKjmiLfnu4QKICAgICAgICBjaG9vc2VHcm91cChpbmRleCl7CiAgICAgICAgICAgIHRoaXMuY2hvb3NlZF9ncm91cCA9IGluZGV4CiAgICAgICAgfSwKICAgICAgICAvLyDnlKjmiLfliJfooagKICAgICAgICBnZXRVc2VyTGlzdCAoKSB7CiAgICAgICAgICAgIGF4aW9zKHsKICAgICAgICAgICAgICAgIG1ldGhvZDoiZ2V0IiwKICAgICAgICAgICAgICAgIHVybDogImh0dHA6Ly84LjEzMS4yMjUuMTMxOjgxL2FwaS9kd2ViLXVzZXJsaXN0LyIsCiAgICAgICAgICAgIH0pLnRoZW4oKHJlcyk9PnsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKQogICAgICAgICAgICAgICAgbGV0IHVzZXJsaXN0ID0gcmVzLmRhdGEKICAgICAgICAgICAgICAgIHVzZXJsaXN0LmZvckVhY2goKHVzZXIpID0+IHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnVzZXJsaXN0LnB1c2goewogICAgICAgICAgICAgICAgICAgIGxhYmVsOiB1c2VyLm5hbWUsCiAgICAgICAgICAgICAgICAgICAga2V5OiB1c2VyLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgbmFtZTp1c2VyLm5hbWUsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgfSwKICAgICAgICAvLyDojrflj5bmiYDmnInnlKjmiLfnu4QKICAgICAgICBnZXRBbGxVc2VyR3JvdXAoKSB7CiAgICAgICAgICAgIGF4aW9zKHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vOC4xMzEuMjI1LjEzMTo4MS9hcGkvZHdlYi1ncm91cC8nLAogICAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKQogICAgICAgICAgICAgICAgdGhpcy5hbGxfZ3JvdXBzID0gcmVzLmRhdGEKICAgICAgICAgICAgfSkKICAgICAgICB9LAogICAgICAgIC8vIOWIoOmZpOeUqOaIt+e7hAogICAgICAgIGRlbGV0ZUdyb3VwKG5hbWUpIHsKICAgICAgICAgICAgYXhpb3MoewogICAgICAgICAgICAgICAgbWV0aG9kOiAiZGVsZXRlIiwKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB1cmw6ICJodHRwOi8vOC4xMzEuMjI1LjEzMTo4MS9hcGkvZHdlYi1ncm91cC8iLAogICAgICAgICAgICAgICAgZGF0YTogUXMuc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmlzbm90VXNlcmxvZ2luCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KS50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5kYXRhKQogICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhID09ICdub2xvZ2luJykgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCflsJrmnKrnmbvlvZUnKQogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhID09ICdub3Blcm0nKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+adg+mZkOS4jei2sycpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEgPT0gJ29rJykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0QWxsVXNlckdyb3VwKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICB9LAoKICAgICAgICAvLyDlhajpgIkg5p2D6ZmQ5aSa6YCJ5qGGCiAgICAgICAgY2hvb3NlQWxsbWV0aG9kKGluZGV4KSB7CiAgICAgICAgICAgIGlmICh0aGlzLm5ld19ncm91cC5jaGVja0xpc3RbaW5kZXhdLmNoZWNrTGlzdC5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgdGhpcy5uZXdfZ3JvdXAuY2hlY2tMaXN0W2luZGV4XS5jaGVja0xpc3QgPSBbImFkZCIsICJkZWxldGUiLCAiY2hhbmdlIiwgInZpZXciXQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5uZXdfZ3JvdXAuY2hlY2tMaXN0W2luZGV4XS5jaGVja0xpc3QgPSBbXQogICAgICAgICAgICB9CgogICAgICAgIH0sCiAgICAgICAgc2F2ZU5ld0dyb3VwKCkgewogICAgICAgICAgICAvLyDliKTmlq3lkI3np7DovpPlhaUKICAgICAgICAgICAgaWYgKHRoaXMubmV3X2dyb3VwLm5hbWUubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCfor7fovpPlhaXnu4TlkI0nKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8g5Yik5pat5p2D6ZmQ6YCJ5oupCiAgICAgICAgICAgIGxldCBjaGVja1R5cGUgPSBmYWxzZQogICAgICAgICAgICBsZXQgcGVybV9saXN0ID0gW10KICAgICAgICAgICAgdGhpcy5uZXdfZ3JvdXAuY2hlY2tMaXN0LmZvckVhY2goKG9iaikgPT4gewogICAgICAgICAgICAgICAgaWYgKG9iai5jaGVja0xpc3QubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIGNoZWNrVHlwZSA9IHRydWUKICAgICAgICAgICAgICAgICAgICBsZXQgcGVybV9pdGVtID0gewogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X3R5cGU6IG9iai5jb250ZW50X3R5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1fbWV0aG9kczogb2JqLmNoZWNrTGlzdCwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcGVybV9saXN0LnB1c2gocGVybV9pdGVtKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgICBpZiAoY2hlY2tUeXBlKSB7CiAgICAgICAgICAgICAgICAvLyDmiafooYzmj5DkuqQKICAgICAgICAgICAgICAgIGxldCBjaGVja0luZm8gPSB7CiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICdhdXRoX3VzZXInLAogICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiBbJ2FkZCcsICdjaGFuZ2UnLCAnZGVsZXRlJywgJ3ZpZXcnXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goImNoZWNrVXNlclBlcm0iLCBjaGVja0luZm8pLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgICAgICAgIGlmIChyZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXhpb3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAncHV0JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly84LjEzMS4yMjUuMTMxOjgxL2FwaS9kd2ViLWdyb3VwLycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBRcy5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiB0aGlzLiRzdG9yZS5nZXR0ZXJzLmlzbm90VXNlcmxvZ2luLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19ncm91cDogdGhpcy5uZXdfZ3JvdXAubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtX2xpc3Q6IEpTT04uc3RyaW5naWZ5KHBlcm1fbGlzdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKHJlcykgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEgPT0gJ25vbG9naW4nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+WwmuacqueZu+W9lScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEgPT0gJ25vcGVybScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgn5p2D6ZmQ5LiN6LazJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YSA9PSAnc2FtZSBuYW1lJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCfph43lpI3lkb3lkI0nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5kYXRhID09ICdvaycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEFsbFVzZXJHcm91cCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAvLyDmiafooYzmj5DkuqQKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCfmlrDnlKjmiLfnu4Qg5p2D6ZmQ5pyq6YCJ5oupJykKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKfTsK"},null]}